<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Poornima Singh/HousingProject.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2555"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:mainHousingData"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="HousingData" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="108"/><column index="3" value="169"/><column index="4" value="290"/><column index="5" value="124"/><column index="6" value="67"/><column index="7" value="117"/><column index="8" value="98"/><column index="9" value="300"/><column index="10" value="300"/><column index="11" value="63"/><column index="12" value="181"/><column index="13" value="75"/><column index="14" value="93"/><column index="15" value="76"/><column index="16" value="67"/><column index="17" value="72"/><column index="18" value="58"/><column index="19" value="63"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/* Cleaning Data in SQL */
SELECT * FROM HousingData;

/* Standardizing SaleDate */
SELECT SaleDate FROM HousingData;
SELECT TYPEOF(SaleDate) FROM HousingData;
ALTER TABLE HousingData ADD SaleDateConverted DATE;
UPDATE HousingData SET SaleDateConverted = CONVERT(DATE, SaleDate) 
SELECT SaleDateConverted FROM HousingData;

/* Editing and Treating PropertyAddress Field using SELF JOIN*/
SELECT * FROM HousingData 
WHERE PropertyAddress IS NULL;
/* Note - Fields with the same ParcelID have the same PropertyAddress */
SELECT * FROM HousingData ORDER BY ParcelID;
/*Treating the Null Values of PropertyAddress */
UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM HousingData AS a
JOIN HousingData  AS b
ON a.ParcelID = b.ParcelID
AND a.UniqueID != b.UniqueID
WHERE a.PropertyAddress IS NULL;
SELECT 
SUBSTR(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) AS Address ,
SUBSTR (PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress)) AS CITY
FROM HousingData;
ALTER TABLE HousingData
ADD PropertyNewAddress Nvarchar(255);
UPDATE HousingData
SET PropertyNewAddress = SUBSTR(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1);
ADD City Nvarchar(255);
UPDATE HousingData
SET City = SUBSTR (PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress));

/* Changing values in SoldAsVacant field */
/* Checking the unique values of SoldAsVacant and their frequency. Basically we are checking the incorrect values of the categorical
variable using frequency table */
SELECT DISTINCT SoldAsVacant, COUNT(SoldAsVacant) FROM HousingData GROUP BY SoldAsVacant ORDER BY 2; /*2 is second column here
of the frequency of the variable &quot;SoldAsVacant&quot; */
/* We will be using CASE to build our conditional expressions */
SELECT SoldAsVacant
CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
     WHEN SoldAsVacant = 'N' THEN 'No'
	 ELSE SoldAsVacant
	 END
FROM HousingData;
/*Updating the values in the table */
UPDATE HousingData
SET
CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
     WHEN SoldAsVacant = 'N' THEN 'No'
	 ELSE SoldAsVacant
	 END;
/* Checking the dataset again*/
SELECT SoldAsVacant, COUNT(SoldAsVacant) FROM HousingData GROUP BY SoldAsVacant ORDER BY SoldAsVacant;

/* Removing Duplicates using CTE and some Windows functions. We will be partioning the data*/
/* Using CTE we are taking out duplicates from the dataset and putting them in a different table and delete the duplicated rows */
WITH RowNumCTE AS (
SELECT *,
 ROW_NUMBER() OVER (
 PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference
 ORDER BY UniqueID )
 row_num 
 FROM HousingData )
/*Deleting the duplicated values which are part of group 2 and not group 1*/
DELETE FROM RowNumCTE WHERE row_num &gt;1;

/* Deleting Unused Columns */
ALTER TABLE HousingData
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate;</sql><current_tab id="0"/></tab_sql></sqlb_project>
